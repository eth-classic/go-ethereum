platform: x64
clone_folder: c:\gopath\src\github.com\ethereumclassic\go-ethereum
os: Visual Studio 2015
environment:
  GOPATH: c:\gopath
  ARTIFACTORY_URL: https://ethereumclassic.jfrog.io/ethereumclassic
  ARTIFACTORY_USER:
    secure: g+YfckDrcilGRMBLymlC5g==
  ARTIFACTORY_APIKEY:
    secure: HzaJar7AlmLYzNRAX4T5DKzLnrk8ltb51tKRcbTY8LNxc7s+K5/PpEdq+vi0WNA74BsBvN0S3cNXdo3kdeQxQDGoFzQyCF24DcJJxnaHxy8=

install:
  - set PATH=%GOPATH%\bin;c:\go\bin;C:\msys64\mingw64\bin;C:\msys64\usr\bin\;%PATH%
  - echo %PATH%
  - echo %GOPATH%

  - ps: $env:VERSION = "$(git describe --tags)" # eg. v1.2.3-14-abcd123
  - ps: $env:VERSION_SEMVER_BASIC = "$(git describe --tags $(git rev-list --tags --max-count=1))" # eg. v1.2.3
  - ps: $env:VERSION_BASE_DIST = ($env:VERSION_SEMVER_BASIC -replace "[0-9]*$", "") # eg. v1.2. (will append 'x' at deploy path)
  - echo %VERSION%
  - echo %VERSION_SEMVER_BASIC%
  - echo %VERSION_BASE_DIST%

  # Install schroedinger.
  - go get github.com/etcdevteam/go-schroedinger/cmd/schroedinger/...

  # Install Rust.
  - appveyor DownloadFile https://win.rustup.rs/ -FileName rustup-init.exe
  - rustup-init -yv --default-toolchain stable --default-host x86_64-pc-windows-gnu
  - set PATH=%PATH%;%USERPROFILE%\.cargo\bin
  - rustup update

  # Build sputnikvm-ffi from go-ethereum/vendor dir (depend on 'dep' vendoring version control, instead of 'upstream master' vc).
  - cd c:\gopath\src\github.com\ethereumclassic\go-ethereum\vendor\github.com\ETCDEVTeam\sputnikvm-ffi\c\ffi
  - cargo build --release --verbose
  - copy c:\gopath\src\github.com\ethereumclassic\go-ethereum\vendor\github.com\ETCDEVTeam\sputnikvm-ffi\c\ffi\target\release\sputnikvm_ffi.lib c:\gopath\src\github.com\ethereumclassic\go-ethereum\vendor\github.com\ETCDEVTeam\sputnikvm-ffi\c\sputnikvm.lib
  # Set build flag definitions.
  - set CGO_LDFLAGS=-Wl,--allow-multiple-definition c:\gopath\src\github.com\ethereumclassic\go-ethereum\vendor\github.com\ETCDEVTeam\sputnikvm-ffi\c\sputnikvm.lib -lws2_32 -luserenv

  - cd c:\gopath\src\github.com\ethereumclassic\go-ethereum

  - go version
  - go env
  - go get golang.org/x/sys/windows
build_script:
  # See .circleci/config.yml for explanation about SputnikVM nondeterministic tests absence.
  - go test -tags="deterministic" ./...
  - go test -ldflags "-X github.com/ethereumclassic/go-ethereum/core.UseSputnikVM=true" -tags="sputnikvm deterministic" ./...
  - schroedinger.exe -t 5 -f .\schroedinger-tests.txt
  - go build -tags=sputnikvm -ldflags "-X main.Version=%VERSION%" github.com/ethereumclassic/go-ethereum/cmd/geth
  - ps: >-
      .\geth.exe version | Where {$_ -match "^Version: "} | %{$actual=($_ -split "\s+")[1];If($actual -ne $env:VERSION){"Expected: `"$env:VERSION`", got: `"$ACTUAL`""; exit 1}}
  - 7z a ethereum-classic-go-ethereum-win64-%VERSION%.zip geth.exe
  - ps: Get-FileHash ethereum-classic-go-ethereum-win64-$env:VERSION.zip -Algorithm SHA256
  - ps: Get-FileHash ethereum-classic-go-ethereum-win64-$env:VERSION.zip -Algorithm SHA256 | Out-File ethereum-classic-go-ethereum-win64-$env:VERSION.zip.sha256
artifacts:
  - path: "ethereum-classic-go-ethereum-*"
deploy_script:
  - curl -sL https://getcli.jfrog.io | bash
  - ps: >-
      If (($env:APPVEYOR_REPO_NAME -eq 'ethereumclassic/go-ethereum') -and (($env:APPVEYOR_REPO_BRANCH -eq 'master') -or ($env:APPVEYOR_REPO_TAG -eq 'true'))) {
        .\jfrog.exe config --url "$env:ARTIFACTORY_URL" --user "$env:ARTIFACTORY_USER" --apikey "$env:ARTIFACTORY_APIKEY" --interactive=false
        .\jfrog.exe rt upload "ethereum-classic-go-ethereum-*" "ethereumclassic/go-ethereum/$env:VERSION_BASE_DIST`x/"
      }
